services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.local
      args:
        GH_ACCESS_TOKEN: ${GH_ACCESS_TOKEN}
    environment:
      - GH_ACCESS_TOKEN=${GH_ACCESS_TOKEN}
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cardnetwork
    ports:
      - 8085:8085

  app-debug:
    build:
      context: .
      dockerfile: Dockerfile.debug
      args:
        GH_ACCESS_TOKEN: ${GH_ACCESS_TOKEN}
    environment:
      - GH_ACCESS_TOKEN=${GH_ACCESS_TOKEN}
    profiles:
      - "tools"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cardnetwork
    ports:
      - 8185:8085
      - 2345:2345

  db:
    image: postgres
    environment:
      POSTGRES_DB: card_layer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
      ALLOW_IP_RANGE: 0.0.0.0/0
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cardnetwork
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

  migrate:
    image: migrate/migrate
    profiles: ["tools"]
    volumes:
      - ./bootstrap/db/migrations:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable",
      ]
    command: ["up"]
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - cardnetwork
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: card_layer

networks:
  cardnetwork:
    driver: bridge
