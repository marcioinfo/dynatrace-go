// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	customer_token "payment-layer-card-api/entities/customer_token"

	errors "github.com/adhfoundation/payment-layer-error-package/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// CustomerTokenRepositoryInterface is an autogenerated mock type for the CustomerTokenRepositoryInterface type
type CustomerTokenRepositoryInterface struct {
	mock.Mock
}

// GetByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *CustomerTokenRepositoryInterface) GetByCustomerID(ctx context.Context, customerID string) ([]*customer_token.CustomerToken, *errors.ErrorOutput) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCustomerID")
	}

	var r0 []*customer_token.CustomerToken
	var r1 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*customer_token.CustomerToken, *errors.ErrorOutput)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*customer_token.CustomerToken); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*customer_token.CustomerToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.ErrorOutput); ok {
		r1 = rf(ctx, customerID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorOutput)
		}
	}

	return r0, r1
}

// GetByCustomerIDAndGateway provides a mock function with given fields: ctx, customerID, gateway
func (_m *CustomerTokenRepositoryInterface) GetByCustomerIDAndGateway(ctx context.Context, customerID string, gateway string) (*customer_token.CustomerToken, *errors.ErrorOutput) {
	ret := _m.Called(ctx, customerID, gateway)

	if len(ret) == 0 {
		panic("no return value specified for GetByCustomerIDAndGateway")
	}

	var r0 *customer_token.CustomerToken
	var r1 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*customer_token.CustomerToken, *errors.ErrorOutput)); ok {
		return rf(ctx, customerID, gateway)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *customer_token.CustomerToken); ok {
		r0 = rf(ctx, customerID, gateway)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer_token.CustomerToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *errors.ErrorOutput); ok {
		r1 = rf(ctx, customerID, gateway)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorOutput)
		}
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, customerToken
func (_m *CustomerTokenRepositoryInterface) Insert(ctx context.Context, customerToken *customer_token.CustomerToken) *errors.ErrorOutput {
	ret := _m.Called(ctx, customerToken)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *customer_token.CustomerToken) *errors.ErrorOutput); ok {
		r0 = rf(ctx, customerToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ErrorOutput)
		}
	}

	return r0
}

// NewCustomerTokenRepositoryInterface creates a new instance of CustomerTokenRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerTokenRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerTokenRepositoryInterface {
	mock := &CustomerTokenRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
