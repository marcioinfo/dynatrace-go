// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// QueueInterface is an autogenerated mock type for the QueueInterface type
type QueueInterface struct {
	mock.Mock
}

// SendMessage provides a mock function with given fields: queueUrl, message
func (_m *QueueInterface) SendMessage(queueUrl string, message string) error {
	ret := _m.Called(queueUrl, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(queueUrl, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessageWithContext provides a mock function with given fields: ctx, queueUrl, message
func (_m *QueueInterface) SendMessageWithContext(ctx context.Context, queueUrl string, message string) error {
	ret := _m.Called(ctx, queueUrl, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, queueUrl, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueueInterface creates a new instance of QueueInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueInterface {
	mock := &QueueInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
