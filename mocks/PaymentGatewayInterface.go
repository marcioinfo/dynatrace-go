// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	customers "payment-layer-card-api/entities/customers"
	customer_dto "payment-layer-card-api/usecases/customers/dtos"

	customertoken_dto "payment-layer-card-api/usecases/customer_token/dtos"

	dtos "payment-layer-card-api/usecases/card_token/dtos"

	errors "github.com/adhfoundation/payment-layer-error-package/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// PaymentGatewayInterface is an autogenerated mock type for the PaymentGatewayInterface type
type PaymentGatewayInterface struct {
	mock.Mock
}

// CreateCard provides a mock function with given fields: ctx, input
func (_m *PaymentGatewayInterface) CreateCard(ctx context.Context, input *dtos.CardTokenInputDTO) (*dtos.CardTokenOutputDTO, int, *errors.ErrorOutput) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 *dtos.CardTokenOutputDTO
	var r1 int
	var r2 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.CardTokenInputDTO) (*dtos.CardTokenOutputDTO, int, *errors.ErrorOutput)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.CardTokenInputDTO) *dtos.CardTokenOutputDTO); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CardTokenOutputDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dtos.CardTokenInputDTO) int); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dtos.CardTokenInputDTO) *errors.ErrorOutput); ok {
		r2 = rf(ctx, input)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errors.ErrorOutput)
		}
	}

	return r0, r1, r2
}

// CreateCustomer provides a mock function with given fields: ctx, _a1, id
func (_m *PaymentGatewayInterface) CreateCustomer(ctx context.Context, _a1 *customer_dto.CreateCustomerDTOInput, id string) (*customertoken_dto.CustomerTokenOutputDTO, int, *errors.ErrorOutput) {
	ret := _m.Called(ctx, _a1, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 *customertoken_dto.CustomerTokenOutputDTO
	var r1 int
	var r2 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *customer_dto.CreateCustomerDTOInput, string) (*customertoken_dto.CustomerTokenOutputDTO, int, *errors.ErrorOutput)); ok {
		return rf(ctx, _a1, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customer_dto.CreateCustomerDTOInput, string) *customertoken_dto.CustomerTokenOutputDTO); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customertoken_dto.CustomerTokenOutputDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customer_dto.CreateCustomerDTOInput, string) int); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *customer_dto.CreateCustomerDTOInput, string) *errors.ErrorOutput); ok {
		r2 = rf(ctx, _a1, id)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errors.ErrorOutput)
		}
	}

	return r0, r1, r2
}

// DeleteCard provides a mock function with given fields: ctx, customerId, cardId
func (_m *PaymentGatewayInterface) DeleteCard(ctx context.Context, customerId string, cardId string) (*dtos.CardTokenOutputDTO, int, *errors.ErrorOutput) {
	ret := _m.Called(ctx, customerId, cardId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 *dtos.CardTokenOutputDTO
	var r1 int
	var r2 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dtos.CardTokenOutputDTO, int, *errors.ErrorOutput)); ok {
		return rf(ctx, customerId, cardId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dtos.CardTokenOutputDTO); ok {
		r0 = rf(ctx, customerId, cardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CardTokenOutputDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) int); ok {
		r1 = rf(ctx, customerId, cardId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) *errors.ErrorOutput); ok {
		r2 = rf(ctx, customerId, cardId)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errors.ErrorOutput)
		}
	}

	return r0, r1, r2
}

// GatewayName provides a mock function with given fields:
func (_m *PaymentGatewayInterface) GatewayName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GatewayName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateCustomer provides a mock function with given fields: ctx, customer, id
func (_m *PaymentGatewayInterface) UpdateCustomer(ctx context.Context, customer *customers.Customer, id string) (*customertoken_dto.CustomerTokenOutputDTO, int, *errors.ErrorOutput) {
	ret := _m.Called(ctx, customer, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomer")
	}

	var r0 *customertoken_dto.CustomerTokenOutputDTO
	var r1 int
	var r2 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *customers.Customer, string) (*customertoken_dto.CustomerTokenOutputDTO, int, *errors.ErrorOutput)); ok {
		return rf(ctx, customer, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customers.Customer, string) *customertoken_dto.CustomerTokenOutputDTO); ok {
		r0 = rf(ctx, customer, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customertoken_dto.CustomerTokenOutputDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customers.Customer, string) int); ok {
		r1 = rf(ctx, customer, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *customers.Customer, string) *errors.ErrorOutput); ok {
		r2 = rf(ctx, customer, id)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errors.ErrorOutput)
		}
	}

	return r0, r1, r2
}

// NewPaymentGatewayInterface creates a new instance of PaymentGatewayInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentGatewayInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentGatewayInterface {
	mock := &PaymentGatewayInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
