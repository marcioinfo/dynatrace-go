// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	customers "payment-layer-card-api/entities/customers"

	errors "github.com/adhfoundation/payment-layer-error-package/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// CustomerRepositoryInterface is an autogenerated mock type for the CustomerRepositoryInterface type
type CustomerRepositoryInterface struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CustomerRepositoryInterface) GetByID(ctx context.Context, id string) (*customers.Customer, *errors.ErrorOutput) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *customers.Customer
	var r1 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string) (*customers.Customer, *errors.ErrorOutput)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *customers.Customer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customers.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.ErrorOutput); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorOutput)
		}
	}

	return r0, r1
}

// GetCustomerByDocument provides a mock function with given fields: ctx, document, serviceID
func (_m *CustomerRepositoryInterface) GetCustomerByDocument(ctx context.Context, document string, serviceID string) (*customers.Customer, *errors.ErrorOutput) {
	ret := _m.Called(ctx, document, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByDocument")
	}

	var r0 *customers.Customer
	var r1 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*customers.Customer, *errors.ErrorOutput)); ok {
		return rf(ctx, document, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *customers.Customer); ok {
		r0 = rf(ctx, document, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customers.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *errors.ErrorOutput); ok {
		r1 = rf(ctx, document, serviceID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorOutput)
		}
	}

	return r0, r1
}

// GetCustomerByEmail provides a mock function with given fields: ctx, email
func (_m *CustomerRepositoryInterface) GetCustomerByEmail(ctx context.Context, email string) (*customers.Customer, *errors.ErrorOutput) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByEmail")
	}

	var r0 *customers.Customer
	var r1 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string) (*customers.Customer, *errors.ErrorOutput)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *customers.Customer); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customers.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.ErrorOutput); ok {
		r1 = rf(ctx, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorOutput)
		}
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, customer
func (_m *CustomerRepositoryInterface) Insert(ctx context.Context, customer *customers.Customer) *errors.ErrorOutput {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *customers.Customer) *errors.ErrorOutput); ok {
		r0 = rf(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ErrorOutput)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, customer
func (_m *CustomerRepositoryInterface) Update(ctx context.Context, customer *customers.Customer) *errors.ErrorOutput {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *customers.Customer) *errors.ErrorOutput); ok {
		r0 = rf(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ErrorOutput)
		}
	}

	return r0
}

// NewCustomerRepositoryInterface creates a new instance of CustomerRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerRepositoryInterface {
	mock := &CustomerRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
