// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	customerservice "payment-layer-card-api/entities/customer_service"

	errors "github.com/adhfoundation/payment-layer-error-package/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// CustomerServiceRepository is an autogenerated mock type for the CustomerServiceRepository type
type CustomerServiceRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, customerService
func (_m *CustomerServiceRepository) Delete(ctx context.Context, customerService *customerservice.CustomerService) *errors.ErrorOutput {
	ret := _m.Called(ctx, customerService)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *customerservice.CustomerService) *errors.ErrorOutput); ok {
		r0 = rf(ctx, customerService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ErrorOutput)
		}
	}

	return r0
}

// GetByCustomerAndServiceID provides a mock function with given fields: ctx, customerID, serviceID
func (_m *CustomerServiceRepository) GetByCustomerAndServiceID(ctx context.Context, customerID string, serviceID string) (*customerservice.CustomerService, *errors.ErrorOutput) {
	ret := _m.Called(ctx, customerID, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCustomerAndServiceID")
	}

	var r0 *customerservice.CustomerService
	var r1 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*customerservice.CustomerService, *errors.ErrorOutput)); ok {
		return rf(ctx, customerID, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *customerservice.CustomerService); ok {
		r0 = rf(ctx, customerID, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerservice.CustomerService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *errors.ErrorOutput); ok {
		r1 = rf(ctx, customerID, serviceID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorOutput)
		}
	}

	return r0, r1
}

// GetByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *CustomerServiceRepository) GetByCustomerID(ctx context.Context, customerID string) ([]*customerservice.CustomerService, *errors.ErrorOutput) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCustomerID")
	}

	var r0 []*customerservice.CustomerService
	var r1 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*customerservice.CustomerService, *errors.ErrorOutput)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*customerservice.CustomerService); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*customerservice.CustomerService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.ErrorOutput); ok {
		r1 = rf(ctx, customerID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorOutput)
		}
	}

	return r0, r1
}

// GetByServiceID provides a mock function with given fields: ctx, serviceID
func (_m *CustomerServiceRepository) GetByServiceID(ctx context.Context, serviceID string) ([]*customerservice.CustomerService, *errors.ErrorOutput) {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetByServiceID")
	}

	var r0 []*customerservice.CustomerService
	var r1 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*customerservice.CustomerService, *errors.ErrorOutput)); ok {
		return rf(ctx, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*customerservice.CustomerService); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*customerservice.CustomerService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.ErrorOutput); ok {
		r1 = rf(ctx, serviceID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ErrorOutput)
		}
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, customerService
func (_m *CustomerServiceRepository) Insert(ctx context.Context, customerService *customerservice.CustomerService) *errors.ErrorOutput {
	ret := _m.Called(ctx, customerService)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *customerservice.CustomerService) *errors.ErrorOutput); ok {
		r0 = rf(ctx, customerService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ErrorOutput)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, customerService
func (_m *CustomerServiceRepository) Update(ctx context.Context, customerService *customerservice.CustomerService) *errors.ErrorOutput {
	ret := _m.Called(ctx, customerService)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *errors.ErrorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *customerservice.CustomerService) *errors.ErrorOutput); ok {
		r0 = rf(ctx, customerService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ErrorOutput)
		}
	}

	return r0
}

// NewCustomerServiceRepository creates a new instance of CustomerServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerServiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerServiceRepository {
	mock := &CustomerServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
